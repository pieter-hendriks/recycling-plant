@startuml architecture
skinparam wrapMessageWidth 100
skinparam wrapWidth 100

object recycling_line <<block>> <<system of interest>>
recycling_line : The system as a whole

together {
	object remote_computer <<block>> <<hardware>>
	object controller_agent <<block>> <<software>>
	object remote_output_agent <<block>> <<software>>
	object xmpp_server <<block>> <<software>>
}

together {
	object layer1_controller <<block>> <<hardware>> 
	object touch_sensor <<block>> <<hardware>>
	object touch_sensor_agent <<block>> <<software>>
	object color_sensor1 <<block>> <<hardware>>
	object color_sensor1_agent <<block>> <<software>>
	object color_sensor2 <<block>> <<hardware>>
	object color_sensor2_agent <<block>> <<software>>
	object ultrasonic_sensor <<block>> <<hardware>> 
	object ultrasonic_sensor_agent <<block>> <<software>> 
	object motor1 <<block>> <<hardware>>
	object motor1_agent <<block>> <<software>> 
	object motor2 <<block>> <<hardware>>
	object motor2_agent <<block>> <<software>> 
	object motor3 <<block>> <<hardware>>
	object motor3_agent <<block>> <<software>> 
}

together {
	object layer2_controller <<block>> <<hardware>> 
	object motor4 <<block>> <<hardware>>
	object motor4_agent <<block>> <<software>> 
	object motor5 <<block>> <<hardware>>
	object motor5_agent <<block>> <<software>> 
	object motor6 <<block>> <<hardware>>
	object motor6_agent <<block>> <<software>> 
}

layer1_controller : The first controller unit
layer2_controller : The second controller unit
recycling_line *-- layer1_controller
recycling_line *-- layer2_controller

touch_sensor : Sensor for detecting user input through a single button
layer1_controller o-- touch_sensor : 1
layer1_controller <|-- touch_sensor_agent : runs on
touch_sensor_agent ..> touch_sensor : controls

color_sensor1 : The first color sensor, detects color correctness before bricks are on the assembly line.
layer1_controller <|-- color_sensor1_agent : runs on
color_sensor1_agent ..> color_sensor1 : controls
layer1_controller o-- color_sensor1 : 2

ultrasonic_sensor : Ultrasonic sensor to ensure no objects are in close proximity while the system is moving.
layer1_controller <|-- ultrasonic_sensor_agent: runs on
layer1_controller o-- ultrasonic_sensor : 3
ultrasonic_sensor_agent ..> ultrasonic_sensor : controls

color_sensor2 : Second color sensor. Ensure bricks progress over the assembly line and detect color to figure out where to place them. 
layer1_controller o-- color_sensor2 : 4
layer1_controller <|-- color_sensor2_agent : runs on
color_sensor2_agent ..> color_sensor2 : controls


motor1 : Motor to drop bricks from the input queue onto the assembly line
layer1_controller <|-- motor1_agent : runs on
motor1_agent ..> motor1 : controls
layer1_controller o-- motor1 : A


motor2 : The motor moving the assembly line
layer1_controller <|-- motor2_agent : runs on
motor2_agent ..> motor2 : controls
layer1_controller o-- motor2 : B


motor3 : The motor performing the wash and shred movements over the assembly line
layer1_controller <|-- motor3_agent : runs on
motor3_agent ..> motor3 : controls
layer1_controller o-- motor3 : C

motor4 : The motor ejecting blocks from the final position when they have been built
layer2_controller <|-- motor4_agent : runs on
motor4_agent ..> motor4 : controls
layer2_controller o-- motor4 : B

motor5 : The motor that pushes bricks into sorting bins when they have arrived at the correct position
layer2_controller <|-- motor5_agent : runs on
motor5_agent ..> motor5 : controls
layer2_controller o-- motor5 : C

motor6 : The motor performing the build operation on bricks arriving at the end of the assembly line
layer2_controller <|-- motor6_agent : runs on
motor6_agent ..> motor6 : controls
layer2_controller o-- motor6 : D

remote_computer <|-- xmpp_server : runs on
remote_computer <|-- remote_output_agent : runs on
remote_computer <|-- controller_agent : runs on

object output_agent <<block>> <<software>>
layer2_controller <|-- output_agent : runs on
' This could also be run additionally on layer1 controller. 
' However, probably duplicate outputs would occur.
' One solution is to show messages from layer1 stuff on layer1 control and same for layer2
' But seems more trouble than it's worth.



layer1_controller <--> xmpp_server : Central messaging system (all agents)
xmpp_server <--> layer2_controller : Central messaging system (all agents)
remote_computer <-> xmpp_server : Central messaging system (all agents)
@enduml
